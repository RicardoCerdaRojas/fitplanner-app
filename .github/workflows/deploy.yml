name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Lint
        run: npm run lint
      - name: Build Project
        run: npm run build
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: .
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      # 1) Autenticar contra GCP (estás bien usando service account JSON)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_FITNESS_FLOW }}'

      # 2) Instalar gcloud (necesario para los comandos gcloud)
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      # 3) Instalar Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      # 4) (Opcional pero recomendado) asegurar que existan versiones ENABLED
      #    Omite este bloque si ya creaste los secretos y tienen versión.
      - name: Ensure GSM secrets have versions
        env:
          PROJECT_ID: fitness-flow-1k4yl
          FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
        run: |
          gcloud config set project "$PROJECT_ID"
          for S in FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID FIREBASE_APP_ID; do
            gcloud secrets describe "$S" >/dev/null 2>&1 || gcloud secrets create "$S" --replication-policy="automatic"
          done
          # Agrega versiones solo si necesitas actualizar valores:
          # echo -n "$FIREBASE_API_KEY"        | gcloud secrets versions add FIREBASE_API_KEY        --data-file=-
          # echo -n "$FIREBASE_AUTH_DOMAIN"    | gcloud secrets versions add FIREBASE_AUTH_DOMAIN    --data-file=-
          # echo -n "$FIREBASE_PROJECT_ID"     | gcloud secrets versions add FIREBASE_PROJECT_ID     --data-file=-
          # echo -n "$FIREBASE_STORAGE_BUCKET" | gcloud secrets versions add FIREBASE_STORAGE_BUCKET --data-file=-
          # echo -n "$FIREBASE_MESSAGING_SENDER_ID" | gcloud secrets versions add FIREBASE_MESSAGING_SENDER_ID --data-file=-
          # echo -n "$FIREBASE_APP_ID"         | gcloud secrets versions add FIREBASE_APP_ID         --data-file=-

      # 5) Grant explícito al backend 'studio' (esto es lo que te está faltando)
      - name: Grant App Hosting backend access to secrets
        env:
          PROJECT_ID: fitness-flow-1k4yl
        run: |
          firebase apphosting:secrets:grantaccess \
            FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID FIREBASE_APP_ID \
            --backend studio \
            --project "$PROJECT_ID"

      # 6) Deploy App Hosting
      - name: Deploy to Firebase App Hosting
        env:
          PROJECT_ID: fitness-flow-1k4yl
        run: firebase deploy --only apphosting --project "$PROJECT_ID"
