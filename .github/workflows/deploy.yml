name: CI/CD Pipeline

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Lint
        run: npm run lint

      - name: Build Project
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: .
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_FITNESS_FLOW }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Install jq (for debug)
        run: sudo apt-get update && sudo apt-get install -y jq

      # Crea secretos si faltan y garantiza al menos una versión ENABLED
      - name: Ensure GSM secrets have versions
        env:
          PROJECT_ID: fitness-flow-1k4yl
          FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
        run: |
          set -e
          gcloud config set project "$PROJECT_ID"

          ensure_secret() {
            NAME="$1"; VALUE="$2"
            gcloud secrets describe "$NAME" >/dev/null 2>&1 || gcloud secrets create "$NAME" --replication-policy="automatic"
            HAS_VERSION=$(gcloud secrets versions list "$NAME" --filter="state:ENABLED" --format="value(name)" | head -n1 || true)
            if [ -z "$HAS_VERSION" ]; then
              echo -n "$VALUE" | gcloud secrets versions add "$NAME" --data-file=-
              echo "Added first ENABLED version for $NAME"
            else
              echo "$NAME already has an ENABLED version: $HAS_VERSION"
            fi
          }

          ensure_secret FIREBASE_API_KEY              "$FIREBASE_API_KEY"
          ensure_secret FIREBASE_AUTH_DOMAIN          "$FIREBASE_AUTH_DOMAIN"
          ensure_secret FIREBASE_PROJECT_ID           "$FIREBASE_PROJECT_ID"
          ensure_secret FIREBASE_STORAGE_BUCKET       "$FIREBASE_STORAGE_BUCKET"
          ensure_secret FIREBASE_MESSAGING_SENDER_ID  "$FIREBASE_MESSAGING_SENDER_ID"
          ensure_secret FIREBASE_APP_ID               "$FIREBASE_APP_ID"

      - name: Debug - Show project & backends
        run: |
          gcloud config set project fitness-flow-1k4yl
          gcloud config list
          echo "Project number:"
          gcloud projects describe fitness-flow-1k4yl --format='value(projectNumber)'
          echo "App Hosting backends:"
          firebase apphosting:backends:list --project fitness-flow-1k4yl || true

      # Da acceso a Cloud Build, App Hosting runtime y Default Compute SA
      - name: Grant secrets to build/runtime/compute SAs (via gcloud)
        env:
          PROJECT_ID: fitness-flow-1k4yl
        run: |
          set -e
          gcloud config set project "$PROJECT_ID"
          PN=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')

          CB_SA="${PN}@cloudbuild.gserviceaccount.com"
          RUNTIME_SA="firebase-app-hosting-compute@${PROJECT_ID}.iam.gserviceaccount.com"
          COMPUTE_SA="${PN}-compute@developer.gserviceaccount.com"
          CBA_AGENT="service-${PN}@gcp-sa-cloudbuild.iam.gserviceaccount.com" # opcional

          for S in FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID FIREBASE_APP_ID; do
            echo "Granting $S to: $CB_SA, $RUNTIME_SA, $COMPUTE_SA"
            for SA in "$CB_SA" "$RUNTIME_SA" "$COMPUTE_SA" "$CBA_AGENT"; do
              gcloud secrets add-iam-policy-binding "$S" \
                --member="serviceAccount:${SA}" \
                --role="roles/secretmanager.secretAccessor" >/dev/null || true
            done
          done

          # pequeña espera por propagación de IAM
          sleep 10

      - name: Debug - Check IAM & versions on secrets
        run: |
          gcloud config set project fitness-flow-1k4yl
          for S in FIREBASE_API_KEY FIREBASE_AUTH_DOMAIN FIREBASE_PROJECT_ID FIREBASE_STORAGE_BUCKET FIREBASE_MESSAGING_SENDER_ID FIREBASE_APP_ID; do
            echo "== $S versions =="
            gcloud secrets versions list "$S" --format="table(name,state,createTime)"
            echo "== $S IAM (secretAccessor) =="
            gcloud secrets get-iam-policy "$S" --format="json" | jq '.bindings[] | select(.role=="roles/secretmanager.secretAccessor")'
          done

      - name: Deploy to Firebase App Hosting
        run: firebase deploy --only apphosting --project fitness-flow-1k4yl