
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isGymAdmin(userId, gymId) {
      return exists(/databases/$(database)/documents/memberships/$(userId + '_' + gymId)) && 
             get(/databases/$(database)/documents/memberships/$(userId + '_' + gymId)).data.role == 'gym-admin';
    }
    
    function isGymCoach(userId, gymId) {
      return exists(/databases/$(database)/documents/memberships/$(userId + '_' + gymId)) && 
             get(/databases/$(database)/documents/memberships/$(userId + '_' + gymId)).data.role == 'coach';
    }

    function isGymStaff(userId, gymId) {
        return isGymAdmin(userId, gymId) || isGymCoach(userId, gymId);
    }

    match /users/{userId} {
      allow create, update: if isSignedIn() && request.auth.uid == userId;

      allow get: if isSignedIn() && (
        (request.auth.uid == userId) ||
        (resource.data.gymId != null && isGymStaff(request.auth.uid, resource.data.gymId))
      );

      allow list: if isSignedIn() && 
                   request.query.limit <= 100 && // Optional: Add a limit to prevent large reads
                   isGymStaff(request.auth.uid, request.query.get('where', {'gymId': ''}).gymId);
    }

    match /gyms/{gymId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + gymId));
      allow update: if isSignedIn() && isGymAdmin(request.auth.uid, gymId);
    }
    
    match /memberships/{membershipId} {
        allow create: if isSignedIn() && request.auth.uid == membershipId.split('_')[0];
        
        allow get: if isSignedIn() && 
                    (request.auth.uid == resource.data.userId || 
                     isGymAdmin(request.auth.uid, resource.data.gymId));

        allow list: if isSignedIn() && 
                     request.query.limit <= 100 &&
                     isGymAdmin(request.auth.uid, request.query.get('where', {'gymId': ''}).gymId);

        allow delete: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
    }

    match /invites/{email} {
      allow create: if isSignedIn() && isGymAdmin(request.auth.uid, request.resource.data.gymId);
      allow read, delete: if isSignedIn() && 
                           ( (isGymAdmin(request.auth.uid, resource.data.gymId)) || 
                             (request.auth.token.email == email) );
    }

    match /routines/{routineId} {
      allow create, update: if isSignedIn() && isGymStaff(request.auth.uid, request.resource.data.gymId);
      allow delete: if isSignedIn() && isGymStaff(request.auth.uid, resource.data.gymId);

      allow read: if isSignedIn() && 
                  ( (isGymStaff(request.auth.uid, resource.data.gymId)) ||
                    (request.auth.uid == resource.data.athleteId) );

      allow update: if isSignedIn() && 
                     request.auth.uid == resource.data.athleteId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['progress']);
    }

    match /routineTypes/{typeId} {
      allow create, update: if isSignedIn() && isGymAdmin(request.auth.uid, request.resource.data.gymId);
      allow delete: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
      allow read: if isSignedIn() && isGymStaff(request.auth.uid, resource.data.gymId);
    }
    
    match /workoutSessions/{sessionId} {
      allow write: if isSignedIn() && request.auth.uid == sessionId;
      allow read: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
    }
  }
}
