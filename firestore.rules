rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function userRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function userGymId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId;
    }

    function isGymAdmin(gymId) {
      return userRole() == 'gym-admin' && userGymId() == gymId;
    }

    function isCoach(gymId) {
      return (userRole() == 'coach' || userRole() == 'gym-admin') && userGymId() == gymId;
    }
    
    function isMember(gymId) {
      return isSignedIn() && userGymId() == gymId;
    }
    
    // --- Collection Rules ---

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      // Allow user creation for anyone (signup).
      allow create: if true;
      // Users can read/update their own profile. Admins can read/update users in their gym.
      allow read: if isUser(userId) || isGymAdmin(resource.data.gymId);
      // Users cannot change their own role. Admins can change roles but not create other admins.
      allow update: if (isUser(userId) && !("role" in request.resource.data)) || 
                       (isGymAdmin(resource.data.gymId) && request.resource.data.role != 'gym-admin');
    }

    // Gyms collection
    match /gyms/{gymId} {
      // Allow gym creation for anyone.
      allow create: if true;
      // Any authenticated user can read gym profile info (for theme loading etc.)
      allow read: if isSignedIn();
      // Only the gym admin can update the gym details.
      allow update: if isGymAdmin(gymId);
    }

    // Memberships collection
    match /memberships/{membershipId} {
      // Allow unauthenticated checks for pending invitations.
      allow get: if !isSignedIn();
      // Any signed-in user can create their own membership record (on signup/join).
      // Let's be more specific. Only admins can create new memberships (invitations)
      // and users can convert their pending one. The logic is handled client/server side,
      // so we just need to ensure they are signed in for most writes.
      allow write: if isSignedIn(); 
      allow list: if isCoach(userGymId()); // Coaches/Admins can list memberships for their gym.
    }
    
    // Routines collection
    match /routines/{routineId} {
      allow read: if isMember(resource.data.gymId);
      allow create, update, delete: if isCoach(request.resource.data.gymId);
    }
    
    // Routine Templates collection
    match /routineTemplates/{templateId} {
      allow read, create, update, delete: if isCoach(request.resource.data.gymId) || isCoach(resource.data.gymId);
    }
    
    // Exercises collection
    match /exercises/{exerciseId} {
      // Any member of a gym can read the exercises for that gym.
      allow read: if isMember(resource.data.gymId);
      // Only admins can create/edit exercises for their gym.
      allow create, update, delete: if isGymAdmin(request.resource.data.gymId) || isGymAdmin(resource.data.gymId);
    }
    
    // Routine Types collection
    match /routineTypes/{typeId} {
      // Any member of a gym can read the routine types for that gym.
      allow read: if isMember(resource.data.gymId);
      // Only admins can create/delete routine types.
      allow create, delete: if isGymAdmin(request.resource.data.gymId) || isGymAdmin(resource.data.gymId);
    }
    
    // Workout Sessions collection (for live view)
    match /workoutSessions/{sessionId} {
       // Only the user themselves or an admin of their gym can read the session.
      allow read: if isUser(sessionId) || isGymAdmin(resource.data.gymId);
      // Only the user who owns the session can write to it.
      allow write: if isUser(sessionId);
    }
  }
}