rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    match /users/{userId} {
      allow read, update: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth() && request.auth.uid == userId;

      // Admin can list users in their gym
      allow list: if isAuth() && getUserData(request.auth.uid).role == 'gym-admin';
    }

    match /gyms/{gymId} {
      allow read: if isAuth();
      allow create: if isAuth() 
                  && request.resource.data.adminUid == request.auth.uid 
                  && getUserData(request.auth.uid).gymId == null;
    }
    
    match /routines/{routineId} {
        allow create: if isAuth() 
                    && getUserData(request.auth.uid).role == 'coach' 
                    && getUserData(request.auth.uid).gymId == request.resource.data.gymId;
        allow read, write: if isAuth();
    }

    match /invites/{email} {
      // Allow signed-in user to read/delete their own invite during signup
      allow get, delete: if isAuth() && request.auth.token.email == email;
      
      // Allow admin to create invites for their own gym
      allow create: if isAuth() 
                  && getUserData(request.auth.uid).role == 'gym-admin'
                  && request.resource.data.gymId == getUserData(request.auth.uid).gymId;
                  
      // Allow admin to list/delete invites in their own gym
      allow list: if isAuth() && getUserData(request.auth.uid).role == 'gym-admin';
      allow delete: if isAuth() 
                   && getUserData(request.auth.uid).role == 'gym-admin' 
                   && getUserData(request.auth.uid).gymId == get(/databases/$(database)/documents/invites/$(email)).data.gymId;
    }
  }
}
