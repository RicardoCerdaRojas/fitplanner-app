
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isMemberOfGym(gymId) {
      return isSignedIn() && getUserData().gymId == gymId;
    }

    function isCoachOrAdmin(gymId) {
      let userRole = getUserData().role;
      return isMemberOfGym(gymId) && (userRole == 'coach' || userRole == 'gym-admin');
    }
    
    function isAdmin(gymId) {
       let userRole = getUserData().role;
       return isMemberOfGym(gymId) && userRole == 'gym-admin';
    }

    // Unauthenticated users can create a user document for themselves,
    // and create their initial gym and membership.
    match /users/{userId} {
      allow create: if !isSignedIn();
      allow read: if isUser(userId) || isCoachOrAdmin(resource.data.gymId);
      allow update: if isUser(userId) || isAdmin(resource.data.gymId);
    }
    
    match /gyms/{gymId} {
      allow create: if !isSignedIn();
      allow read: if isSignedIn();
      allow update: if isAdmin(gymId);
    }

    match /memberships/{membershipId} {
       // Allow unauthenticated checks for pending memberships by email on the /join page.
       // This uses the wildcard syntax to check the membershipId string.
      allow get: if membershipId.matches('PENDING_.*');
      // Only admins can manage memberships
      allow list, write, delete: if isAdmin(resource.data.gymId);
    }

    // Authenticated and authorized access for core app collections
    match /routines/{routineId} {
      allow read: if isMemberOfGym(resource.data.gymId);
      allow create, update, delete: if isCoachOrAdmin(request.resource.data.gymId);
    }
    
    match /routineTemplates/{templateId} {
       allow read, write: if isCoachOrAdmin(resource.data.gymId);
    }

    match /exercises/{exerciseId} {
       allow read: if isMemberOfGym(resource.data.gymId);
       allow write: if isCoachOrAdmin(resource.data.gymId);
    }
    
    match /routineTypes/{typeId} {
       allow read: if isMemberOfGym(resource.data.gymId);
       allow write: if isAdmin(resource.data.gymId);
    }

    match /workoutSessions/{sessionId} {
      // A user can only manage their own workout session
      allow read, write, delete: if isUser(sessionId);
    }
  }
}
