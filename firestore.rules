
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Function to get user's data from their own profile document
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isMemberOf(gymId) {
      return isSignedIn() && getUserData().gymId == gymId;
    }

    function isCoach(gymId) {
      return isMemberOf(gymId) && getUserData().role == 'coach';
    }
    
    function isAdmin(gymId) {
      return isMemberOf(gymId) && getUserData().role == 'gym-admin';
    }

    // Collection Rules
    
    match /users/{userId} {
      // READ: You can read your own profile. Admins of your gym can also read it.
      allow read: if isUser(userId) || isAdmin(resource.data.gymId);
      
      // CREATE: Anyone can create a user document (for signup).
      allow create: if true;
      
      // UPDATE: You can update your own profile. An admin can update your role, but cannot make you an admin.
      allow update: if isUser(userId) || 
                     (isAdmin(resource.data.gymId) && request.resource.data.role != 'gym-admin');
                     
      allow delete: if false; // Users should not be hard-deleted.
    }

    match /gyms/{gymId} {
        // READ: Anyone signed in can read basic gym info (for themes, names etc).
        allow read: if isSignedIn();
        // CREATE: Anyone can create a gym (for new gym signups).
        allow create: if true;
        // UPDATE/DELETE: Only the admin of that specific gym can modify or delete it.
        allow update, delete: if isAdmin(gymId);
    }
    
    match /memberships/{membershipId} {
        // READ: Unauthenticated users can check for PENDING invitations via email.
        allow get: if membershipId.startsWith('PENDING_');
        // WRITE (CREATE/UPDATE): A gym admin can invite new members.
        allow write: if isSignedIn() && isAdmin(request.resource.data.gymId);
        // DELETE: An admin can delete a pending invitation or an active membership.
        allow delete: if isSignedIn() && isAdmin(resource.data.gymId);

        // LIST: No one should be able to list all memberships.
        allow list: if false;
    }
    
    match /exercises/{exerciseId} {
        // READ: Any member of the gym can read its exercises.
        allow read: if isMemberOf(resource.data.gymId);
        // WRITE: Only coaches or admins of that gym can manage exercises.
        allow write: if isCoach(request.resource.data.gymId) || isAdmin(request.resource.data.gymId);
    }

    match /routineTypes/{typeId} {
        // READ: Any member of the gym can read its routine types.
        allow read: if isMemberOf(resource.data.gymId);
        // WRITE: Only the admin of that gym can manage routine types.
        allow write: if isAdmin(request.resource.data.gymId);
    }

    match /routines/{routineId} {
        // READ: You can read your own routine. Coaches/admins of your gym can also read it.
        allow read: if (isUser(resource.data.memberId)) || 
                     (isCoach(resource.data.gymId)) || 
                     (isAdmin(resource.data.gymId));
        // UPDATE: You can update your own progress. Coaches/admins can update the whole routine.
        allow update: if (isUser(resource.data.memberId) && request.resource.data.keys().hasOnly(['progress', 'updatedAt'])) ||
                       (isCoach(resource.data.gymId)) || 
                       (isAdmin(resource.data.gymId));
        // CREATE/DELETE: Coaches and admins of the gym can create/delete routines.
        allow create, delete: if isCoach(request.resource.data.gymId) || isAdmin(request.resource.data.gymId);
    }
    
    match /routineTemplates/{templateId} {
        // READ/WRITE: Only coaches and admins of a gym can manage its templates.
        allow read, write: if isCoach(request.resource.data.gymId) || isAdmin(request.resource.data.gymId);
    }
    
    match /workoutSessions/{sessionId} {
      // READ/WRITE: Only the user who owns the session can interact with it.
      allow read, write, delete: if isUser(sessionId);
    }
  }
}
