rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user belongs to a specific gym
    function isUserInGym(gymId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }

    // Helper function to check if a user is an admin of a specific gym
    function isGymAdmin(gymId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isUserInGym(gymId) && userRole == 'gym-admin';
    }
    
    // Helper function to check if a user is a coach in a specific gym
     function isCoach(gymId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isUserInGym(gymId) && (userRole == 'coach' || userRole == 'gym-admin');
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can create their own profile document
      allow create: if request.auth != null;
      // A user can read, update, or delete their own profile
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Any user belonging to the same gym can read another user's profile
      allow list: if request.auth != null && isUserInGym(resource.data.gymId);
    }

    // Rules for the 'invites' collection
    match /invites/{inviteId} {
        // Any authenticated user can read an invite document (needed for signup)
        allow read: if request.auth != null;
        // Any authenticated user can delete an invite (needed to "consume" it on signup)
        allow delete: if request.auth != null;
        // Only an admin of the specified gym can create an invite
        allow create: if request.auth != null && isGymAdmin(request.resource.data.gymId);
        // Only an admin of the specified gym can update an invite
        allow update: if request.auth != null && isGymAdmin(get(/databases/$(database)/documents/invites/$(inviteId)).data.gymId);
    }
    
    // Rules for the 'gyms' collection
    match /gyms/{gymId} {
        // Any authenticated user can create a gym
        allow create: if request.auth != null;
        // Only a user within the gym can read the gym's profile
        allow read: if request.auth != null && isUserInGym(gymId);
        // Only a gym-admin can update the gym's profile
        allow update: if request.auth != null && isGymAdmin(gymId);
    }
    
    // Rules for 'routineTypes'
    match /routineTypes/{typeId} {
        // Any user in the gym can read the routine types
        allow get, list: if request.auth != null && isUserInGym(resource.data.gymId);
        // Only a gym-admin can create, update, or delete routine types
        allow create, update, delete: if request.auth != null && isGymAdmin(request.resource.data.gymId);
    }
    
    // Rules for 'routines'
    match /routines/{routineId} {
        // A coach can create routines
        allow create: if request.auth != null && isCoach(request.resource.data.gymId);
        // An athlete can read and update their own routines (for progress)
        // A coach can read, update, and delete any routine in their gym
        allow get: if request.auth != null && (request.auth.uid == resource.data.athleteId || isCoach(resource.data.gymId));
        allow list: if request.auth != null && isUserInGym(resource.data.gymId);
        allow update, delete: if request.auth != null && (request.auth.uid == resource.data.athleteId || isCoach(resource.data.gymId));
    }
    
    // Rules for 'workoutSessions'
    match /workoutSessions/{sessionId} {
      // The session must belong to the authenticated user
      allow read, write, delete: if request.auth != null && request.auth.uid == sessionId;
      // Any user in the gym can list/read active sessions (for the live dashboard)
      allow list, get: if request.auth != null && isUserInGym(resource.data.gymId);
    }
  }
}