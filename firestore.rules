rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is an admin of a specific gym
    function isGymAdmin(gymId) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'gym-admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }

    // Helper function to check if a user belongs to a specific gym
    function isMemberOf(gymId) {
        return request.auth != null &&
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }

    // Users can read/update their own profile.
    // Gym admins can read profiles of users in their gym.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || (resource.data.gymId != null && isGymAdmin(resource.data.gymId));
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    // Gyms can be read by their members and updated by their admins.
    match /gyms/{gymId} {
        allow read: if isMemberOf(gymId);
        allow create: if request.auth.uid == request.resource.data.adminUid;
        allow update: if isGymAdmin(gymId);
    }
    
    // Invites can only be managed by admins of the corresponding gym
    match /invites/{inviteId} {
        allow read, write: if isGymAdmin(resource.data.gymId);
        allow create: if isGymAdmin(request.resource.data.gymId);
    }
    
    // Routine Types can be managed by admins and read by members
    match /routineTypes/{typeId} {
        allow read: if isMemberOf(resource.data.gymId);
        allow write: if isGymAdmin(resource.data.gymId);
        allow create: if isGymAdmin(request.resource.data.gymId);
    }
    
    // Routines can be managed by coaches and athletes
    match /routines/{routineId} {
      allow read: if request.auth.uid == resource.data.athleteId ||
                     (isMemberOf(resource.data.gymId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['coach', 'gym-admin']);

      allow create: if isMemberOf(request.resource.data.gymId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['coach', 'gym-admin'];
      
      allow update: if (request.auth.uid == resource.data.athleteId) || 
                       (isMemberOf(resource.data.gymId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['coach', 'gym-admin']);

      allow delete: if isMemberOf(resource.data.gymId) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['coach', 'gym-admin'];
    }
  }
}
