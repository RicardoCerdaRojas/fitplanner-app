
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isGymAdmin(gymId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'gym-admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }
    
    function isCoach(gymId) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return (userRole == 'coach' || userRole == 'gym-admin') &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }

    function isMemberOf(gymId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow user to create their own account.
    // Allow users to read their own data.
    // Allow admins to read user data for their gym.
    match /users/{userId} {
      allow create: if true; // For signup
      allow read: if request.auth.uid == userId || isGymAdmin(get(/databases/$(database)/documents/users/$(userId)).data.gymId);
      allow update: if request.auth.uid == userId || isGymAdmin(resource.data.gymId);
    }

    // Anyone can read gym public profiles (for theming, etc)
    // Only the gym admin can create/update the gym profile.
    match /gyms/{gymId} {
      allow get;
      allow create: if request.auth.uid == request.resource.data.adminUid;
      allow update: if isGymAdmin(gymId);
    }

    // Allow creating pending memberships (invitations)
    // Allow reading a membership if you are the user or the gym admin.
    match /memberships/{membershipId} {
        allow get: if true; // For checking pending on /join page.
        allow create, update: if isGymAdmin(request.resource.data.gymId);
        allow delete: if isGymAdmin(get(/databases/$(database)/documents/memberships/$(membershipId)).data.gymId);
        allow read: if isSignedIn() && (isGymAdmin(get(/databases/$(database)/documents/memberships/$(membershipId)).data.gymId) || request.auth.uid == get(/databases/$(database)/documents/memberships/$(membershipId)).data.userId);
    }
    
    // Coaches/Admins can manage routines.
    // Members of the gym can read them.
    match /routines/{routineId} {
        allow read: if isSignedIn() && isMemberOf(get(/databases/$(database)/documents/routines/$(routineId)).data.gymId);
        allow create, update, delete: if isSignedIn() && isCoach(get(/databases/$(database)/documents/routines/$(routineId)).data.gymId);
    }
    
    match /routineTemplates/{templateId} {
        allow read: if isSignedIn() && isMemberOf(get(/databases/$(database)/documents/routineTemplates/$(templateId)).data.gymId);
        allow create, update, delete: if isSignedIn() && isCoach(get(/databases/$(database)/documents/routineTemplates/$(templateId)).data.gymId);
    }

    // Admins can manage routine types.
    // Members can read them (needed for displaying routine type names).
    match /routineTypes/{typeId} {
        allow read: if isSignedIn();
        allow create, delete: if isSignedIn() && isGymAdmin(get(/databases/$(database)/documents/routineTypes/$(typeId)).data.gymId);
    }
    
    // Admins can manage exercises.
    // Coaches/Members can read them.
    match /exercises/{exerciseId} {
        allow read: if isSignedIn() && isMemberOf(get(/databases/$(database)/documents/exercises/$(exerciseId)).data.gymId);
        allow create, update, delete: if isSignedIn() && isGymAdmin(get(/databases/$(database)/documents/exercises/$(exerciseId)).data.gymId);
    }
    
    // Only the user themselves can update their workout session.
    // Admins can read them for the live view.
    match /workoutSessions/{sessionId} {
      allow read: if isGymAdmin(get(/databases/$(database)/documents/workoutSessions/$(sessionId)).data.gymId);
      allow create, update, delete: if request.auth.uid == sessionId;
    }
  }
}
