rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the request comes from an authenticated user.
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is an admin of a specific gym.
    function isGymAdmin(userId, gymId) {
      let membershipPath = /databases/$(database)/documents/memberships/$(userId + '_' + gymId);
      return exists(membershipPath) && get(membershipPath).data.role == 'gym-admin';
    }
    
    // Helper function to check if the user is a coach of a specific gym.
    function isGymCoach(userId, gymId) {
      let membershipPath = /databases/$(database)/documents/memberships/$(userId + '_' + gymId);
      return exists(membershipPath) && get(membershipPath).data.role == 'coach';
    }

    // Helper function to check if the user is a staff member (admin or coach) of a specific gym.
    function isGymStaff(userId, gymId) {
        return isGymAdmin(userId, gymId) || isGymCoach(userId, gymId);
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can create and update their own document.
      allow create, update: if isSignedIn() && request.auth.uid == userId;

      // A user can read their own profile.
      // A gym staff member can read the profile of any user in their gym.
      allow read: if isSignedIn() && (
        (request.auth.uid == userId) || 
        (resource.data.gymId != null && isGymStaff(request.auth.uid, resource.data.gymId))
      );
    }

    // Rules for the 'gyms' collection
    match /gyms/{gymId} {
      // An authenticated user can create a gym.
      allow create: if isSignedIn();
      
      // Any user with a membership to this gym can read its profile.
      allow read: if isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid + '_' + gymId));
      
      // The gym admin can update their gym's settings.
      allow update: if isSignedIn() && isGymAdmin(request.auth.uid, gymId);
    }
    
    // Rules for the 'memberships' collection
    match /memberships/{docId} {
      // A user can create their own pending membership document, using their email as the docId.
      // A gym admin can create a pending membership for a user.
      allow create: if isSignedIn() && 
                    ( (request.resource.data.status == 'pending') || 
                      (request.auth.uid == request.resource.data.userId) );

      // A user can read their own membership document.
      // A gym admin can read any membership document for their gym.
      // A gym staff can read pending memberships.
      allow read: if isSignedIn() && 
                  ( (resource.data.status == 'pending' && isGymStaff(request.auth.uid, resource.data.gymId)) ||
                    (request.auth.uid == resource.data.userId) || 
                    (isGymAdmin(request.auth.uid, resource.data.gymId)) );
      
      // A gym admin can update a membership document (e.g. to activate it).
      allow update: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);

      // A gym admin can delete memberships from their gym.
      allow delete: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
    }

    // Rules for the 'routines' collection
    match /routines/{routineId} {
      // A coach or admin can create, update, or delete routines for their own gym.
      allow create, update, delete: if isSignedIn() && isGymStaff(request.auth.uid, get(/databases/$(database)/documents/routines/$(routineId)).data.gymId);

      // Staff can read any routine in their gym. An athlete can read their own assigned routines.
      allow read: if isSignedIn() && 
                  ( (isGymStaff(request.auth.uid, resource.data.gymId)) ||
                    (request.auth.uid == resource.data.athleteId) );

      // An athlete can update their own progress. The rule ensures ONLY the progress field can be changed by them.
      allow update: if isSignedIn() && 
                     request.auth.uid == resource.data.athleteId &&
                     request.resource.data.keys().hasOnly(['progress']);
    }

    // Rules for the 'routineTypes' collection
    match /routineTypes/{typeId} {
      // An admin can create or update routine types for their gym.
      allow create, update: if isSignedIn() && isGymAdmin(request.auth.uid, request.resource.data.gymId);
      
      // An admin can delete a routine type by checking the existing document's gymId.
      allow delete: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
      
      // Any staff member (coach or admin) can read routine types in their gym.
      allow read: if isSignedIn() && isGymStaff(request.auth.uid, resource.data.gymId);
    }
    
    // Rules for the 'workoutSessions' collection
    match /workoutSessions/{sessionId} {
      // An athlete can create, update, and delete their own session document.
      allow write: if isSignedIn() && request.auth.uid == sessionId;

      // A gym admin can read session documents belonging to their gym.
      allow read: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
    }
  }
}