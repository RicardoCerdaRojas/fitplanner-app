rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    //  Helper Functions
    // =================================
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Checks if a user has an active membership document for a specific gym.
    function isMemberOfGym(userId, gymId) {
      return exists(/databases/$(database)/documents/memberships/$(userId + '_' + gymId));
    }

    // Checks if the user is an admin of a specific gym.
    function isGymAdmin(userId, gymId) {
      let membershipPath = /databases/$(database)/documents/memberships/$(userId + '_' + gymId);
      return isMemberOfGym(userId, gymId) && get(membershipPath).data.role == 'gym-admin';
    }
    
    // Checks if the user is a coach of a specific gym.
    function isGymCoach(userId, gymId) {
      let membershipPath = /databases/$(database)/documents/memberships/$(userId + '_' + gymId);
      return isMemberOfGym(userId, gymId) && get(membershipPath).data.role == 'coach';
    }

    // Checks if the user is a staff member (admin or coach) of a specific gym.
    function isGymStaff(userId, gymId) {
      return isGymAdmin(userId, gymId) || isGymCoach(userId, gymId);
    }

    // =================================
    //  Collection Rules
    // =================================

    match /users/{userId} {
      // A user can create and update their own document.
      allow create, update: if isSignedIn() && request.auth.uid == userId;

      // A user can read their own profile.
      // A staff member can read the profile of any user in their gym.
      // This single rule covers both individual `get` and collection `list` queries,
      // as long as the client-side query is properly filtered by gymId.
      allow read: if isSignedIn() && (
        (request.auth.uid == userId) ||
        (resource.data.gymId != null && isGymStaff(request.auth.uid, resource.data.gymId))
      );
    }

    match /gyms/{gymId} {
      // An authenticated user can create a gym.
      allow create: if isSignedIn();
      
      // Any user with a membership to this gym can read its profile.
      allow read: if isSignedIn() && isMemberOfGym(request.auth.uid, gymId);
      
      // The gym admin can update their gym's settings.
      allow update: if isSignedIn() && isGymAdmin(request.auth.uid, gymId);
    }
    
    match /memberships/{membershipId} {
      // Allow creation if the user is creating their own 'pending' membership record,
      // or if an admin is creating a membership for their gym.
      allow create: if isSignedIn() && 
                    ( (request.resource.data.status == 'pending' && isGymAdmin(request.auth.uid, request.resource.data.gymId)) || 
                      (request.auth.uid == membershipId.split('_')[0]) );
        
      // A user can read their own membership.
      // A staff member can read any membership belonging to their gym.
      allow read: if isSignedIn() && 
                    ( (resource.data.userId != null && request.auth.uid == resource.data.userId) || 
                      (resource.data.gymId != null && isGymStaff(request.auth.uid, resource.data.gymId)) );
      
      // A staff member can update any membership in their gym (e.g., to activate a pending one).
      allow update: if isSignedIn() && isGymStaff(request.auth.uid, resource.data.gymId);

      // A gym admin can delete memberships from their gym.
      allow delete: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
    }

    // This collection is deprecated and replaced by pending memberships.
    // Keeping rules for safety but should not be used.
    match /invites/{email} {
      allow read, write: if false;
    }

    match /routines/{routineId} {
      // A staff member can create, update, or delete routines for their own gym.
      allow create, delete: if isSignedIn() && isGymStaff(request.auth.uid, request.resource.data.gymId);
      
      // Staff can update routines in their gym.
      // An athlete can update their own progress.
      allow update: if isSignedIn() && 
                     ( (isGymStaff(request.auth.uid, resource.data.gymId)) ||
                       (request.auth.uid == resource.data.athleteId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['progress']))
                     );

      // Staff can read any routine in their gym. An athlete can read their own assigned routines.
      allow read: if isSignedIn() && 
                  ( (isGymStaff(request.auth.uid, resource.data.gymId)) ||
                    (request.auth.uid == resource.data.athleteId) );
    }

    match /routineTypes/{typeId} {
      // An admin can create, update, or delete routine types for their gym.
      allow write: if isSignedIn() && isGymAdmin(request.auth.uid, request.resource.data.gymId);
      
      // Any staff member (coach or admin) can read routine types in their gym.
      allow read: if isSignedIn() && isGymStaff(request.auth.uid, resource.data.gymId);
    }
    
    match /workoutSessions/{sessionId} {
      // An athlete can create, update, and delete their own session document.
      allow write: if isSignedIn() && request.auth.uid == sessionId;

      // A gym admin can read session documents belonging to their gym.
      allow read: if isSignedIn() && isGymAdmin(request.auth.uid, resource.data.gymId);
    }
  }
}