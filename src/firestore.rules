rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get a user's specific membership data for a gym.
    function getMembership(userId, gymId) {
      return get(/databases/$(database)/documents/memberships/$(userId)_$(gymId)).data;
    }
    
    // Helper function to check if the requesting user has a specific role in a gym.
    function hasRoleInGym(gymId, role) {
        let membership = getMembership(request.auth.uid, gymId);
        return membership.role == role;
    }

    // Helper function to check if the requesting user is an admin of a gym.
    function isAdmin(gymId) {
      return hasRoleInGym(gymId, 'gym-admin');
    }

    // Helper function to check if the requesting user is a coach or admin of a gym.
    function isStaff(gymId) {
        let membership = getMembership(request.auth.uid, gymId);
        return membership.role == 'coach' || membership.role == 'gym-admin';
    }

    // Rules for the 'users' collection (global user data)
    match /users/{userId} {
      // A user can create their own profile.
      allow create: if isSignedIn() && request.auth.uid == userId;
      // A user can read/update their own profile. An admin of ANY gym the user is in can read the profile.
      allow read, update: if isSignedIn() && request.auth.uid == userId;
    }

    // Rules for the 'memberships' collection
    match /memberships/{membershipId} {
        // Membership ID must be in the format 'userId_gymId'.
        function isCorrectlyFormatted() {
            return membershipId.split('_')[0] == request.resource.data.userId &&
                   membershipId.split('_')[1] == request.resource.data.gymId;
        }

        // A user can create their own membership.
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId && isCorrectlyFormatted();

        // A user can read their own membership. Staff can read any membership in their gym.
        allow read: if isSignedIn() && 
                    (request.auth.uid == resource.data.userId || isStaff(resource.data.gymId));
        
        // An admin can delete memberships from their gym (e.g., remove a member).
        allow delete: if isSignedIn() && isAdmin(resource.data.gymId);

        // An admin can update memberships in their gym (e.g., change a role).
        allow update: if isSignedIn() && isAdmin(resource.data.gymId);
    }

    // Rules for the 'gyms' collection
    match /gyms/{gymId} {
      // An authenticated user can create a gym document.
      // Further checks in transactions ensure they also create an admin membership.
      allow create: if isSignedIn();
      // Any member of the gym can read the gym's profile.
      allow read: if isSignedIn() && exists(/databases/$(database)/documents/memberships/$(request.auth.uid)_$(gymId));
      // Only the gym admin can update their gym's settings.
      allow update: if isSignedIn() && isAdmin(gymId);
    }

    // Rules for the 'invites' collection
    match /invites/{email} {
        // An admin can create an invite for their gym.
        allow create: if isSignedIn() && isAdmin(request.resource.data.gymId);

        // An admin can read/delete invites for their gym.
        // A user can read/delete their OWN invite during signup.
        allow read, delete: if isSignedIn() && 
                             (isAdmin(resource.data.gymId) || request.auth.token.email == email);
    }

    // Rules for the 'routines' collection
    match /routines/{routineId} {
      // A coach or admin can create, update, or delete routines for their own gym.
      allow create, update, delete: if isSignedIn() && isStaff(request.resource.data.gymId);

      // Staff can read any routine in their gym. An athlete can read their own assigned routines.
      allow read: if isSignedIn() && 
                  (isStaff(resource.data.gymId) || request.auth.uid == resource.data.athleteId);

      // An athlete can update their own progress.
      allow update: if isSignedIn() && 
                     request.auth.uid == resource.data.athleteId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['progress']);
    }

    // Rules for the 'routineTypes' collection
    match /routineTypes/{typeId} {
      // An admin can manage routine types for their gym.
      allow create, update, delete: if isSignedIn() && isAdmin(request.resource.data.gymId);
      
      // Staff can read routine types in their gym.
      allow read: if isSignedIn() && isStaff(resource.data.gymId);
    }
    
    // Rules for the 'workoutSessions' collection
    match /workoutSessions/{sessionId} {
      // An athlete can create, update, and delete their own session document.
      allow write: if isSignedIn() && request.auth.uid == sessionId;

      // An admin can read session documents belonging to their gym.
      allow read: if isSignedIn() && isAdmin(resource.data.gymId);
    }
  }
}
