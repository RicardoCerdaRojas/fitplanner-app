
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if the user is a member of a specific gym
    function isMember(gymId) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.gymId == gymId;
    }

    // Check if the user is a coach or admin of a specific gym
    function isCoachOrAdmin(gymId) {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isMember(gymId) && (role == 'coach' || role == 'gym-admin');
    }

    // Check if the user is the admin of a specific gym
    function isAdmin(gymId) {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isMember(gymId) && role == 'gym-admin';
    }

    // --- Collection Rules ---

    // USERS collection
    match /users/{userId} {
      // READ: Anyone can read a user profile if they are signed in.
      // This is needed to get user names for display.
      // A more secure rule would be `isMember(resource.data.gymId)`.
      allow read: if isSignedIn();

      // CREATE: A user can only create their own profile.
      allow create: if request.auth.uid == userId;
      
      // UPDATE: A user can only update their own profile, OR an admin of their gym can update it.
      // Admins cannot change a user's role TO 'gym-admin'.
      allow update: if (request.auth.uid == userId) || 
                       (isAdmin(request.resource.data.gymId) && request.resource.data.role != 'gym-admin');
                       
      // DELETE: No one can delete user profiles for now to prevent data loss.
      allow delete: if false;
    }

    // GYMS collection
    match /gyms/{gymId} {
      // READ: Anyone can read gym data (for theme, logo etc)
      allow read: if true;
      
      // CREATE: Only signed-in users can create a gym document.
      allow create: if isSignedIn();

      // UPDATE: Only the gym's admin can update it.
      allow update: if isAdmin(gymId);

      // DELETE: No one can delete a gym for now.
      allow delete: if false;
    }

    // MEMBERSHIPS collection (Pending invitations and records of membership)
    match /memberships/{membershipId} {
        // READ: 
        // Allow unauthenticated checks for PENDING invitations (for /join page).
        // Allow signed-in users to list memberships for their gym.
        allow get: if !isSignedIn() && membershipId.startsWith('PENDING_');
        allow list, read: if isSignedIn() && isCoachOrAdmin(resource.data.gymId);

        // WRITE:
        // Allow creation of pending memberships by coaches/admins.
        // Allow updates by coaches/admins.
        // Allow deletion by coaches/admins.
        allow write: if isSignedIn() && isCoachOrAdmin(request.resource.data.gymId);
    }

    // ROUTINES, EXERCISES, ROUTINE TYPES, WORKOUT SESSIONS
    match /{collection}/{docId} {
      // This rule applies to: routines, exercises, routineTypes, routineTemplates, workoutSessions
      allow read: if isSignedIn() && isMember(resource.data.gymId);
      allow write: if isSignedIn() && isCoachOrAdmin(request.resource.data.gymId);
    }
  }
}
